#include <iostream>
#include <stdlib.h>
using namespace std;

template <typename T>
class List
{ //Создаем тип данных Список
public:
	List() : head(NULL), tail(NULL){}; //Инициализируем адреса как пустые

	~List()
	{ //Деструктор
		while (head)
		{					   //Пока по адресу на начало списка что-то есть
			tail = head->next; //Резервная копия адреса следующего звена списка
			delete head;	   //Очистка памяти от первого звена
			head = tail;	   //Смена адреса начала на адрес следующего элемента
		}
	}

	void print_list()
	{
		//ВЫВОДИМ СПИСОК С КОНЦА
		Node *temp = tail; //Временный указатель на адрес последнего элемента

		while (temp != NULL)
		{							   //Пока не встретится пустое значение
			cout << temp->data << " "; //Выводить значение на экран
			temp = temp->prev;		   //Указываем, что нужен адрес предыдущего элемента
		}
		cout << "\n";

		//ВЫВОДИМ СПИСОК С НАЧАЛА
		temp = head;		 //Временно указываем на адрес первого элемента
		while (temp != NULL) //Пока не встретим пустое значение
		{
			cout << temp->data << " "; //Выводим каждое считанное значение на экран
			temp = temp->next;		   //Смена адреса на адрес следующего элемента
		}
		cout << "\n";
	}

	void push_back(T data)
	{
		Node *temp = new Node(); //Выделение памяти под новый элемент структуры
		temp->next = NULL;		 //Указываем, что изначально по следующему адресу пусто
		temp->data = data;		 //Записываем значение в структуру

		if (head != NULL)
		{					   //Если список не пуст
			temp->prev = tail; //Указываем адрес на предыдущий элемент в соотв. поле
			tail->next = temp; //Указываем адрес следующего за хвостом элемента
			tail = temp;	   //Меняем адрес хвоста
		}
		else
		{						//Если список пустой
			temp->prev = NULL;	//Предыдущий элемент указывает в пустоту
			head = tail = temp; //Голова=Хвост=тот элемент, что сейчас добавили
		}
	}

private:
	class Node
	{ //Структура, являющаяся звеном списка
	public:
		T data; //Значение data будет передаваться в список
		Node *next;
		Node *prev; //Указатели на адреса следующего и предыдущего элементов списка
	};

	Node *head = nullptr;
	Node *tail = nullptr; //Указатели на адреса начала списка и его конца
};

int main()
{
	List<int> lst;		//Объявляем переменную, тип которой есть список
	lst.push_back(100); //Добавляем в список элементы
	lst.push_back(200);
	lst.push_back(900);
	lst.push_back(888);

	for (int saske = 0; saske < 10; saske++)
	{
		conut << ';';
	}

	lst.print_list(); //Отображаем список на экране

	return 0;
}